#!/usr/bin/env python
PACKAGE = "ipa_dirt_detection"
#import roslib;roslib.load_manifest(PACKAGE)

#from dynamic_reconfigure.parameter_generator import *
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("number_detect_scales", int_t, 0, "number of considered scales, single scale = 1, multi scale > 1", 1, 1, 100)
gen.add("bird_eye_start_resolution", double_t, 0, "smallest resolution for perspective transform, if multiple scales are checked, in [pixel/m]", 300., 1., 1200.)
gen.add("bird_eye_base_resolution", double_t, 0, "bird eye base/standard/reference resolution for bird eye's perspective transform, in [pixel/m]", 300., 1., 1200.)

gen.add("floor_plane_model_a", double_t, 0, "floor plane parameters [a,b,c,d] for plane equation (a*x + b*y + c*z + d = 0), the plane defines the image mask", 0., -1., 1.)
gen.add("floor_plane_model_b", double_t, 0, "floor plane parameters [a,b,c,d] for plane equation (a*x + b*y + c*z + d = 0), the plane defines the image mask", 0., -1., 1.)
gen.add("floor_plane_model_c", double_t, 0, "floor plane parameters [a,b,c,d] for plane equation (a*x + b*y + c*z + d = 0), the plane defines the image mask", 0., -1., 1.)
gen.add("floor_plane_model_d", double_t, 0, "floor plane parameters [a,b,c,d] for plane equation (a*x + b*y + c*z + d = 0), the plane defines the image mask", 0., -1., 1.)
gen.add("floor_search_iterations", int_t, 0, "the number of attempts to segment the floor plane in the image, if set to 0 the parameters of floor_plane_model will be used diectly as plane model without fitting a plane into the 3d data", 3, 0, 100)
gen.add("floor_plane_inlier_distance", double_t, 0, "accepted distance of 3d points to the plane model to be considered inliers, in [m]", 0.05, 0., 1000000.)
gen.add("min_plane_points", int_t, 0, "minimum number of points that are necessary to find the floor plane", 100, 10, 1000000)
gen.add("max_distance_to_camera", double_t, 0, "only those points which are close enough to the camera are displayed in the bird's eye view, [max distance in m]", 3., 0., 20.)

gen.add("is_warp_image_bird_perspective_enabled", bool_t, 0, "if true, image warping to a bird's eye perspective is enabled", True)


#gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
#gen.add("double_param", double_t, 0, "A double parameter", .5, 0, 1)
#gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
#gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)

#size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                  gen.const("Medium", int_t, 1, "A medium constant"),
#                  gen.const("Large", int_t, 2, "A large constant"),
#                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                  "An enum to set size")

#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "ipa_dirt_detection", "DirtDetectionPreprocessing"))
